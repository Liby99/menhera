let zero = (f) => (x) => x in
let one = (f) => (x) => f(x) in
let two = (f) => (x) => f(f(x)) in

let inc = (n) => (f) => (x) => f(n(f)(x)) in
let plus = (m) => (n) => (f) => (x) => m(f)(n(f)(x)) in
let mult = (m) => (n) => (f) => (x) => m(n(f))(x) in
let exp = (m) => (n) => (f) => (x) => n(m)(f)(x) in

let c2i = (c) => c((a) => a + 1)(0) in

c2i (mult (inc (inc (one))) (plus (zero) (inc(one))))
