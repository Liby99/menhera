type linked_list<a> = [] | [a, linked_list<a>]

module linked_list {
    new = () => [],
    get = (ls, i) => match ls {
        [] => throw("Index out of bounds"),
        [e, l] => if i == 0 then e else get(l, i - 1)
    },
    push = (ls, e) => [e, ls],
    pop = (ls) => ls[1],
    peek = (ls) => ls[0],
    append = (l1, l2) => if l1 == [] then l2 else [l1[0], append(l1[1], l2)],
    length = (ls) => if ls == [] then 0 else 1 + length(ls[1]),
    fold_left = (f, ls, b) =>
        if ls == [] then b
        else fold_left(f, pop(ls), f(peek(ls), b)),
    map = (ls, f) => fold_left((x, acc) => push(acc, f(x)), ls, []),
    filter = (ls, f) => fold_left((x, acc) => if f(x) then push(acc, x) else acc, ls, []),
    reverse = (ls) => if ls == [] then [] else append(reverse(ls[1]), [ls[0], []])
    equals = (l1, l2) =>
        if l1 == [] && l2 == [] then true
        else l1[0] == l2[0] && equals(l1[1], l2[1])
    to_string = (ls) =>
        let f = (ls) =>
            if ls == [] then "" else if ls[1] == [] then to_string(ls[0]) else ls[0] + ", " + to_string(ls[1])
        in "[" + f(ls) + "]"
}
