type list of [`a`, `a` list] {
    ctor = () => []
    get = (ls, i) =>
}

type num list =
  (t 1) * ... * (t num)
  
def list =
  - ctor : nil
  - get : int -> t num
  - append : t nus list ->
  - length

[]
[1, []]
[false, [2, []]]

type point =
    | Polar
    | Cartesian
    | asdfasd

module math {
    sum = (a, b) => a + b
}
